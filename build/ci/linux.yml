parameters:
  configuration: 'Debug'
  toolchain: 'clang'
  arch: 'x64'

jobs:
  - job: 'Linux_${{ parameters.configuration }}_${{ parameters.toolchain }}_${{ parameters.arch }}'

    pool:
      vmImage: ubuntu-latest

    container:
      image: trflynn89/libfly:${{ parameters.toolchain }}
      options: --cap-add SYS_PTRACE

    steps:
    - template: setup.yml

    - ${{ if eq(parameters.configuration, 'Debug') }}:
      - script: |
          echo "##vso[task.setvariable variable=config]release=0 verbose=1 toolchain=${{ parameters.toolchain }} arch=${{ parameters.arch }}"
        displayName: 'Configure'

      - script: |
          make -j -C build/nix $(config) tests
        displayName: 'Test'

      # For now, only emit LCOV reports for gcc. With clang, llvm-cov reports
      # lines containing only a closing curly brace as uncovered. See:
      #     https://libcellml.readthedocs.io/en/latest/coverage_statistics.html
      #
      # Alternatively, should be able to upload clang coverage reports that are
      # non-GCOV-formatted. Something like:
      #     llvm-profdata merge -sparse default.profraw -o default.prodata
      #     llvm-cov show libfly_unit_tests -instr-profile=default.prodata --ignore-filename-regex="test/.*" > /tmp/coverage
      - ${{ if eq(parameters.toolchain, 'gcc') }}:
        - script: |
            lcov --capture --directory build/nix --output-file coverage
            lcov --remove coverage '/usr/*' '*/test/*' --output-file coverage
            lcov --list coverage

            bash <(curl -s https://codecov.io/bash) -f coverage
          displayName: 'Coverage'

    - ${{ if eq(parameters.configuration, 'Release') }}:
      - script: |
          echo "##vso[task.setvariable variable=config]release=1 toolchain=${{ parameters.toolchain }} arch=${{ parameters.arch }}"
        displayName: 'Configure'

      - script: |
          make -j -C build/nix $(config) libfly
        displayName: 'Build'

      - template: package.yml
        parameters:
          contents: 'build/nix/release/${{ parameters.toolchain }}/${{ parameters.arch }}/etc/libfly-*.tar.bz2'

    - script: |
        make -j -C build/nix $(config) install
      displayName: 'Install'
      failOnStderr: true

    - ${{ if eq(parameters.arch, 'x64') }}:
      - script: |
          (cd /opt && sudo tar -xzf Qt.tar.gz)
          make -j -C examples/qt $(config)
          make -j -C examples/build $(config)
        displayName: 'Examples'
        failOnStderr: true

    - ${{ if eq(parameters.arch, 'x86') }}:
      - script: |
          make -j -C examples/build $(config)
        displayName: 'Examples'
        failOnStderr: true


